The Basic Framework
Metasploit is a modular system. To better understand the framework, it will help view the Metasploit Framework as if it were a vehicle. The framework, much like the chassis of James Bond’s well maintained Aston Martin, provides a housing for all of modules that actually fuel the car. HD Moore, much like “Q” from the James Bond films, has stocked the nooks and crannies around the engine with an arsenal of goodies. If one of the modules within the framework becomes damaged or is removed, the vehicle can still function and continue to unleash wave after wave of attack.

The framework breaks down into the module types:

1.
Exploit Modules

2.
Auxiliary Modules

3.
Payloads

4.
Listeners

5.
Shellcode

Applications that interface with the Metasploit framework could be considered a sixth category, such as Armitage; however, these are not part of the actual framework itself. Just because James Bond can control his vehicle from his watch doesn’t mean the vehicle needs the owner to wear the wrist watch to operate it.

Exploit Modules
Exploit modules are prepackaged pieces of code within the database that when run against a victim computer will attempt to leverage a vulnerability on the local or remote system compromising the system and allowing for DoS, disclosure of sensitive information, or the upload of a specially crafted payload module such as Meterpreter shell or other type of call back shell.

Auxiliary Modules
Auxiliary modules, unlike exploit modules, do not require the use of a payload to run. These types of modules include useful programs such as scanners, fuzzers, and SQL injection tools. Some of the tools within the auxiliary directory are extremely powerful and should be used with caution. Penetration testers use the plethora of scanners in the auxiliary directory to gather a deep understanding of the system to be attacked and then transition to exploit modules.

Payloads
If James Bond’s Aston Martin is a reference for the Metasploit Framework itself, the exploit and auxiliary modules would be akin to the rocket launchers and flame throwers under the hood. In this model, payloads would be the specialized communications equipment that can be attached to the target to maintain covert communications and tracking. While using an exploit against a vulnerable machine, a payload is generally attached to the exploit before its execution. This payload contains the set of instructions that the victim’s computer is to carry out after compromise. Payloads come in many different flavors and can range from a few lines of code to small applications such as the Meterpreter shell. One should not just automatically jump to the Meterpreter shell. Metasploit contains over 200 different payloads. There are payloads for NetCat, dynamic link library (DLL) injection, user management, shells, and more. Thinking like a spy might give the security tester a proper mindset when it comes to payload selection. The tester needs to contemplate what the overall goal is after the exploit has succeeded. Does the code need to lay dormant until called? Does the code executed need to call back to the attacker for further instructions? Does the code need to simply execute a series of shutdown commands? Render the victimized system useless to the company? The most common payloads are categorized into bind shells and reverse shells.

Bind Shells
These types of shell lay dormant and listen for an attacker to connect or send instructions. If a penetration tester knows that there is going to be direct network access to the system later in the testing event and does not want to raise attention, then bind shells could be the way to go. Bind shells are not a good choice for victim machines that are behind a firewall that do not have direct network access into the machine.

Reverse Shells
Reverse shells call home to the security tester for immediate instruction and interaction. If the compromised machine executes the exploit with a reverse payload, then a tester will be presented with a shell to access the machine as if they were sitting at the keyboard on the victim’s machine.

Meterpreter Shell
The Meterpreter shell, a special type of shell, is the bread and butter of Metasploit. Rapid7 continually develops the Meterpreter shell with an incredibly lethal mini-arsenal on its own. The Meterpreter shell can be added as a payload that is either a bind shell or reverse shell. The use of Meterpreter shell is discussed in detail later in this chapter.

Payload selection is often overlooked for most new security testers because there is a push to get “root” as fast as possible and gain access through a Meterpreter shell. Sometimes, this is not optimal and a deep thought process is necessary to exploit a vulnerability. During a covert penetration test, going in guns blazing, hair on fire will certainly ignite every alarm on the network. James Bond would surely have had a short career if every attempt to infiltrate the enemy’s camp if there had been no sneakiness.

Payload selection is not about simply picking one. Of the over 200 payloads available, there are two main categories, inline or staged. Inline payloads, or single payloads, are all inclusive and self-contained. Staged payloads contain multiple pieces of the payload referred to as stagers. Staged payloads fit into multiple tiny memory spaces and await execution from a prior stager. Eventually all of the stagers are executed like a big play on the Broadway “stage.” Spotting the difference between inline and staged payloads is a little tricky if searching by name. For instance, below are the two different payloads that look similar in nature:

linux/x64/shell/bind_tcp	(Staged)
linux/x64/shell_bind_tcp	(Inline)
In the Metasploit console, running the command “show payloads” will list all available payloads. The farthest right-hand column is a very brief description of the payload’s functionality and will specify whether the payload is either inline or staged. If the payload doesn’t directly state inline or staged in the description, it is assumed to be an inline module.

Listeners
Even the mighty 007 has to take orders from “M.” Listeners are specific handlers within the Metasploit framework that interact with the sessions established by payloads. The listener can either be embedded with a bind shell and sit waiting for a connection or actively sit listening for incoming connection on the security tester’s computer. Without the use of the listener, the communications back and forth would not be possible. Luckily, the listeners are handled by the Metasploit program and require little interaction.

Shellcode
Shellcode isn’t particularly a module all by itself, but more of a submodule that is embedded into the available payloads within the Metasploit framework payloads. Much like the actual explosive material inside of the missile shot from Bond’s Aston Martin, the shellcode inside of payload is more akin to the explosive material. The shellcode is the delivery system inside that actually generates the hole, uploads malicious code, and executes the commands inside of the payload to generate a shell hence the name, shellcode. Not all payloads contain shellcode. For example, the payload, “windows/adduser” is just a series of commands aimed at generating a user or an administrative account on a windows platform.

Shellcode delves deep into a programming world that can be very confusing for new testers. This book does not go into detail about the writing of shellcode. It is a recommendation of the authors to seek training courses from Offensive Security or the SANS Institute. If classes are not for you, Google is a friend.
